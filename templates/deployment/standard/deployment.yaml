{{- if .Values.deployment.enabled }}
{{ $branchSpecificAppName := include "commerce-app-v2.branchSpecificAppName" . }}
{{ $appName := required ".Values.app.name required!" .Values.app.name }}
{{ $cacertNamePrefix := printf "%s-%s-%s-" $appName (required ".Values.envMisnomer required!" .Values.envMisnomer) (required ".Values.envType required!" .Values.envType) }}
{{ $cacertsSecretName := printf "%scacerts" $cacertNamePrefix }} {{/*indended to be branch-agnostic for now*/}}
{{ $storeKeysSecretName := printf "%sstorekeys" $cacertNamePrefix }} {{/*indended to be branch-agnostic for now*/}}
{{ $mountPath := required ".Values.vertx.mountPath required!" .Values.vertx.mountPath }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-deployment") .) }}
  labels:
    {{- include "commerce-app-v2.labels" . | nindent 4 }}
spec:
  replicas: {{ include "commerce-app-v2.deploymentNumberOfReplicas" . }}
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      name: {{ $branchSpecificAppName | quote }}
  template:
    metadata:
      labels:
        name: {{ $branchSpecificAppName | quote }}
        service: {{ $branchSpecificAppName | quote }}
      annotations:
        ecomm/deploymentTime: "{{ now | unixEpoch }}"
        prometheus.io/scrape: "{{ .Values.deployment.prometheus.scrape }}"
        prometheus.io/port: "{{ .Values.deployment.prometheus.port }}"
        prometheus.io/scheme: "{{ .Values.deployment.prometheus.scheme }}"
        prometheus.io/path: "{{ .Values.deployment.prometheus.path }}"
        {{- if .Values.configs.standard.db.enabled }}
        secret.reloader.stakater.com/reload: "{{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-db-config") .) }}"
        {{- end }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: name
                      operator: In
                      values:
                        - {{ $branchSpecificAppName }}
                topologyKey: kubernetes.io/hostname
              weight: 100
      containers:
        - name: {{ $branchSpecificAppName }}
          lifecycle:
            preStop:
              exec:
                command:
                  - '/bin/sleep'
                  - '30'
          image: "{{ include "commerce-app-v2.containerImageRepository" . }}:{{ required ".Values.deployment.image.tag required!" .Values.deployment.image.tag }}"
          imagePullPolicy: Always
          volumeMounts:
            {{- if .Values.configs.standard.app.enabled }}
            - name: app-config-secret
              mountPath: "{{ $mountPath }}/app"
            {{- end }}
            {{- if .Values.configs.standard.auth.enabled }}
            - name: auth-config-secret
              mountPath: "{{ $mountPath }}/auth"
            {{- end }}
            {{- if .Values.configs.standard.clientCert.enabled }}
            - name: client-cert-config-secret
              mountPath: "{{ $mountPath }}/pki"
            {{- end }}
            {{- if .Values.configs.standard.crypto.enabled }}
            - name: crypto-config-secret
              mountPath: "{{ $mountPath }}/crypto"
            {{- end }}
            {{- if .Values.configs.standard.db.enabled }}
            - name: db-config-secret
              mountPath: "{{ $mountPath }}/db"
            {{- end }}
            {{- if .Values.configs.standard.hosts.enabled }}
            - name: hosts-config-secret
              mountPath: "{{ $mountPath }}/hosts"
            {{- end }}
            {{- if .Values.configs.standard.log.enabled }}
            - name: log-config-configmap
              mountPath: "{{ $mountPath }}/logconfig"
            {{- end }}
            {{- if .Values.configs.standard.pki.enabled }}
            - name: client-cert-context-secret
              mountPath: "{{ $mountPath }}/pki-context"
            {{- end }}
            {{- if .Values.configs.standard.prometheus.enabled }}
            - name: prometheus-config-secret
              mountPath: "{{ $mountPath }}/prometheus"
            {{- end }}
            {{- if .Values.configs.standard.sensitive.enabled }}
            - name: sensitive-config-secret
              mountPath: "{{ $mountPath }}/sensitive"
            {{- end }}
            {{- if .Values.configs.standard.tls.enabled }}
            - name: tls-config-secret
              mountPath: "{{ $mountPath }}/tls"
            {{- end }}
            {{- if .Values.configs.standard.classicDb.enabled }}
            - name: classic-db-config
              mountPath: "{{ $mountPath }}/classic-db"
            {{- end }}
            - name: "{{ $cacertsSecretName }}"
              mountPath: "{{ $mountPath }}/cacerts"
            - name: "{{ $storeKeysSecretName }}"
              mountPath: "{{ $mountPath }}/storekeys"
            {{- if eq (required ".Values.app.frameworkType required!" .Values.app.frameworkType) "vertx" }}
            - name: vertx-options-secret
              mountPath: "{{ $mountPath }}/vertx-options"
            {{- end }}
            {{- with .Values.deployment.extraVolumeMounts }}
            {{ toYaml . | nindent 12 }}
            {{- end }}
          ports:
            - containerPort: 8443
              protocol: "TCP"
          securityContext:
            readOnlyRootFilesystem: {{ .Values.deployment.readOnlyRootFilesystem }}
          {{- if .Values.deployment.enableLivenessProbe }}
          livenessProbe:
            httpGet:
              path: "/{{ .Values.app.apiVersion }}/{{ .Values.app.pathNoun }}/ping"
              port: 8443
              scheme: HTTPS
              httpHeaders:
                - name: X-Request-Id
                  value: "54732a76-9566-47b7-8248-5aebd637a5c6"
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          {{- end }}
          readinessProbe:
            httpGet:
              path: {{ required ".Values.deployment.readinessProbe.path required!" .Values.deployment.readinessProbe.path | quote }}
              port: 8443
              scheme: HTTPS
              httpHeaders:
                - name: X-Request-Id
                  value: "54732a76-9566-47b7-8248-5aebd637a5c6"
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          resources:
            {{- include "commerce-app-v2.deploymentResources" . | nindent 12 }}
          env:
            - name: APP_NAME
              value: {{ $appName | quote }}
            - name: APP_VERSION
              value: {{ .Values.deployment.image.tag | quote }}
            - name: AWS_REGION
              value: {{ required ".Values.awsRegion required!" .Values.awsRegion | quote }}
            # ref: https://confluence.godaddy.com/display/VM/CRITICAL+-+log4j+2.x+RCE#CRITICALlog4j2.xRCE-RemediationSteps
            - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
              value: "true"
            {{- if .Values.deployment.enableApm }}
            - name: ELASTIC_APM_SECRET_TOKEN
              valueFrom:
                secretKeyRef:
                  name: essp-apm-credentials
                  key: apm_secret_token
            - name: ELASTIC_APM_SERVER_URLS
              valueFrom:
                secretKeyRef:
                  name: essp-apm-credentials
                  key: apm_server_url
            {{- end }}
            {{- if eq (required ".Values.app.frameworkType required!" .Values.app.frameworkType) "vertx" }}
            - name: VERTX_ENV
              value: "{{ required ".Values.vertxEnv required!" .Values.vertxEnv }}"
            - name: VERTX_CONF
              value: "-conf {{ $mountPath }}/app/config.json"
            - name: CONFIG_PATH
              value: "{{ $mountPath }}/app"
            - name: METRICS_PORT
              value: "{{ required ".Values.deployment.prometheus.port required!" .Values.deployment.prometheus.port }}"
            - name: JAVA_OPTS
              value: "{{ include "commerce-app-v2.javaOpts" . }}"
            - name: MOUNT_PATH
              value: "{{ $mountPath }}"
            - name: ENV_SPECIFIC_IMAGE
              value: "NO"
            - name: CACERTS
              value: "{{ $cacertsSecretName }}"
            - name: STOREKEYS
              value: "{{ $storeKeysSecretName }}"
            - name: ENABLE_JMX
              value: "{{ required ".Values.jmx.enabled required!" .Values.jmx.enabled }}"
            {{- end }}
            {{- with .Values.deployment.env }}
            {{ toYaml . | nindent 12 }}
            {{- end }}
      terminationGracePeriodSeconds: 90
      volumes:
        {{- if .Values.configs.standard.app.enabled }}
        - name: app-config-secret
          secret:
            secretName: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-app-config") .) }}
        {{- end }}
        {{- if .Values.configs.standard.auth.enabled }}
        - name: auth-config-secret
          secret:
            secretName: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-auth-config") .) }}
        {{- end }}
        {{- if .Values.configs.standard.clientCert.enabled }}
        - name: client-cert-config-secret
          secret:
            secretName: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-client-cert-config") .) }}
        {{- end }}
        {{- if .Values.configs.standard.crypto.enabled }}
        - name: crypto-config-secret
          secret:
            secretName: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-crypto-config") .) }}
        {{- end }}
        {{- if .Values.configs.standard.db.enabled }}
        - name: db-config-secret
          secret:
            secretName: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-db-config") .) }}
        {{- end }}
        {{- if .Values.configs.standard.hosts.enabled }}
        - name: hosts-config-secret
          secret:
            secretName: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-hosts-config") .) }}
        {{- end }}
        {{- if .Values.configs.standard.log.enabled }}
        - name: log-config-configmap
          configMap:
            name: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-log-config") .) }}
        {{- end }}
        {{- if .Values.configs.standard.pki.enabled }}
        - name: client-cert-context-secret
          secret:
            secretName: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-client-cert-context") .) }}
        {{- end }}
        {{- if .Values.configs.standard.prometheus.enabled }}
        - name: prometheus-config-secret
          secret:
            optional: true
            secretName: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-prometheus-config") .) }}
        {{- end }}
        {{- if .Values.configs.standard.sensitive.enabled }}
        - name: sensitive-config-secret
          secret:
            secretName: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-sensitive-config") .) }}
            defaultMode: 256
        {{- end }}
        {{- if .Values.configs.standard.tls.enabled }}
        - name: tls-config-secret
          secret:
            secretName: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-tls-config") .) }}
        {{- end }}
        {{- if .Values.configs.standard.classicDb.enabled }}
        - name: classic-db-config
          secret:
            optional: true
            secretName: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-classic-db-configexternal") .) }}
        {{- end }}
        - name: {{ $cacertsSecretName }}
          secret:
            secretName: {{ $cacertsSecretName }}
        - name: {{ $storeKeysSecretName }}
          secret:
            secretName: {{ $storeKeysSecretName }}
        {{- if eq (required ".Values.app.frameworkType required!" .Values.app.frameworkType) "vertx" }}
        - name: vertx-options-secret
          secret:
            secretName: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-vertx-options") .) }}
        {{- end }}
        {{- if eq (required ".Values.app.frameworkType required!" .Values.app.frameworkType) "spring-boot" }}
        - name: wildcard-cert
          secret:
            secretName: "{{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-wildcard-cert") .) }}"
        {{- end }}
        {{- with .Values.deployment.extraVolumes }}
        {{ toYaml . | nindent 10 }}
        {{- end }}
{{- end }}
