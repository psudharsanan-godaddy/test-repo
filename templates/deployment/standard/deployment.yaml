{{- if .Values.deployment }}
{{- if .Values.deployment.enabled }}
{{- $branchSpecificAppName := include "commerce-app-v2.branchSpecificAppName" . }}
{{- $appName := required ".Values.app.name required!" .Values.app.name }}
{{- $apiVersion := required ".Values.app.apiVersion required!" .Values.app.apiVersion }}
{{- $pathNoun := required ".Values.app.pathNoun required!" .Values.app.pathNoun }}
{{- $awsRegion := required ".Values.awsRegion required!" .Values.awsRegion }}
{{- $env := required ".Values.env required!" .Values.env }}
{{- $accountType := required ".Values.accountType required!" .Values.accountType }}
{{- $accountTypeMisnomer := ternary "shared" $accountType (eq $accountType "gen") }}
{{- $useLegacyStoreSecretName := and (eq $env "prod") (eq $awsRegion "us-east-1") }}
{{- $cacertsSecretName := ternary (printf "%s-prod-%s%s" $appName $accountTypeMisnomer "-cacerts") (include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-cacerts") .)) $useLegacyStoreSecretName }}
{{- $storeKeysSecretName := ternary (printf "%s-prod-%s%s" $appName $accountTypeMisnomer "-storekeys") (include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-storekeys") .)) $useLegacyStoreSecretName }}
{{- $mountPath := required ".Values.configs.mountPath required!" .Values.configs.mountPath }}
{{- $appConfigEnabled := include "commerce-app-v2.configs.standard.app.enabled" . | include "strToBool" }}
{{- $authConfigEnabled := include "commerce-app-v2.configs.standard.auth.enabled" . | include "strToBool" }}
{{- $cryptoConfigEnabled := include "commerce-app-v2.configs.standard.crypto.enabled" . | include "strToBool" }}
{{- $dbConfigEnabled := include "commerce-app-v2.configs.standard.db.enabled" . | include "strToBool" }}
{{- $logConfigEnabled := include "commerce-app-v2.configs.standard.log.enabled" . | include "strToBool" }}
{{- $prometheusAgentEnabled := include "commerce-app-v2.configs.standard.prometheusAgent.enabled" . | include "strToBool" }}
{{- $classicDbConfigEnabled := include "commerce-app-v2.configs.standard.classicDb.enabled" . | include "strToBool" }}
{{- $clientCertConfigEnabled := include "commerce-app-v2.configs.standard.clientCert.enabled" . | include "strToBool" }}
{{- $hostsConfigEnabled := include "commerce-app-v2.configs.standard.hosts.enabled" . | include "strToBool" }}
{{- $pkiConfigEnabled := include "commerce-app-v2.configs.standard.pki.enabled" . | include "strToBool" }}
{{- $sensitiveConfigEnabled := include "commerce-app-v2.configs.standard.sensitive.enabled" . | include "strToBool" }}
{{- $tlsConfigEnabled := include "commerce-app-v2.configs.standard.tls.enabled" . | include "strToBool" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-deployment") .) }}
  labels:
    {{- include "commerce-app-v2.labels" . | nindent 4 }}
  {{- if $dbConfigEnabled }}
  annotations:
    secret.reloader.stakater.com/reload: "{{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-db-config") .) }}"
  {{- end }}
spec:
  replicas: {{ include "commerce-app-v2.deploymentNumberOfReplicas" . }}
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      name: {{ $branchSpecificAppName | quote }}
  template:
    metadata:
      labels:
        name: {{ $branchSpecificAppName | quote }}
        service: {{ $branchSpecificAppName | quote }}
      annotations:
        ecomm/deploymentTime: "{{ now | unixEpoch }}"
        {{- if .Values.configs.standard.prometheus.enabled }}
        prometheus.io/scrape: "{{ .Values.deployment.prometheus.scrape }}"
        prometheus.io/port: "{{ .Values.deployment.prometheus.port }}"
        prometheus.io/scheme: "{{ .Values.deployment.prometheus.scheme }}"
        prometheus.io/path: "{{ .Values.deployment.prometheus.path }}"
        {{- end }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: name
                      operator: In
                      values:
                        - {{ $branchSpecificAppName }}
                topologyKey: kubernetes.io/hostname
              weight: 100
      containers:
        - name: {{ $branchSpecificAppName }}
          lifecycle:
            preStop:
              exec:
                command:
                  - '/bin/sleep'
                  - '30'
          image: "{{ include "commerce-app-v2.containerImageRepository" . }}:{{ required ".Values.deployment.image.tag required!" .Values.deployment.image.tag }}"
          imagePullPolicy: Always
          volumeMounts:
            #BEGIN: standard specific volume mounts
            {{- if $appConfigEnabled }}
            - name: app-config-secret
              mountPath: "{{ $mountPath }}/app"
            {{- end }}
            {{- if $authConfigEnabled }}
            - name: auth-config-secret
              mountPath: "{{ $mountPath }}/auth"
            {{- end }}
            {{- if $clientCertConfigEnabled }}
            - name: client-cert-config-secret
              mountPath: "{{ $mountPath }}/pki"
            {{- end }}
            {{- if $cryptoConfigEnabled }}
            - name: crypto-config-secret
              mountPath: "{{ $mountPath }}/crypto"
            {{- end }}
            {{- if $dbConfigEnabled }}
            - name: db-config-secret
              mountPath: "{{ $mountPath }}/db"
            {{- end }}
            {{- if $hostsConfigEnabled }}
            - name: hosts-config-secret
              mountPath: "{{ $mountPath }}/hosts"
            {{- end }}
            {{- if $logConfigEnabled }}
            - name: log-config-configmap
              mountPath: "{{ $mountPath }}/logconfig"
            {{- end }}
            {{- if $pkiConfigEnabled }}
            - name: client-cert-context-secret
              mountPath: "{{ $mountPath }}/pki-context"
            {{- end }}
            {{- if $prometheusAgentEnabled }}
            - name: prometheus-config-secret
              mountPath: "{{ $mountPath }}/prometheus"
            {{- end }}
            {{- if $sensitiveConfigEnabled }}
            - name: sensitive-config-secret
              mountPath: "{{ $mountPath }}/sensitive"
            {{- end }}
            {{- if $tlsConfigEnabled }}
            - name: tls-config-secret
              mountPath: "{{ $mountPath }}/tls"
            {{- end }}
            {{- if $classicDbConfigEnabled }}
            - name: classic-db-config
              mountPath: "{{ $mountPath }}/classic-db"
            {{- end }}
            - name: "{{ $cacertsSecretName }}"
              mountPath: "{{ $mountPath }}/cacerts"
            - name: "{{ $storeKeysSecretName }}"
              mountPath: "{{ $mountPath }}/storekeys"
            #END: standard specific volume mounts
            {{- include "commerce-app-v2.deployment.framework.volumeMount"  . | nindent 12 }}
            {{- with .Values.deployment.extraVolumeMounts }}
            {{ toYaml . | nindent 12 }}
            {{- end }}
          ports:
            - containerPort: 8443
              protocol: "TCP"
          securityContext:
            readOnlyRootFilesystem: {{ .Values.deployment.readOnlyRootFilesystem }}
          {{- if .Values.deployment.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              {{- if .Values.deployment.livenessProbe.path }}
              path: "{{ .Values.deployment.livenessProbe.path }}"
              {{- else }}
              path: "/{{ $apiVersion }}/{{ $pathNoun }}/ping"
              {{- end }}
              port: 8443
              scheme: HTTPS
              httpHeaders:
                - name: X-Request-Id
                  value: "54732a76-9566-47b7-8248-5aebd637a5c6"
            initialDelaySeconds: {{ .Values.deployment.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.deployment.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.deployment.livenessProbe.timeoutSeconds }}
            successThreshold: 1
            failureThreshold: 2
          {{- end }}
          readinessProbe:
            httpGet:
              {{- if .Values.deployment.readinessProbe.path }}
              path: {{ .Values.deployment.readinessProbe.path | quote }}
              {{- else }}
              path: "/{{ $apiVersion }}/{{ $pathNoun }}/ping"
              {{- end }}
              port: 8443
              scheme: HTTPS
              httpHeaders:
                - name: X-Request-Id
                  value: "54732a76-9566-47b7-8248-5aebd637a5c6"
            initialDelaySeconds: {{ .Values.deployment.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.deployment.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.deployment.readinessProbe.timeoutSeconds }}
            successThreshold: 1
            failureThreshold: 2
          resources:
            {{- include "commerce-app-v2.deploymentResources" . | nindent 12 }}
          env:
            #BEGIN: standard specific envs
            - name: APP_NAME
              value: {{ $appName | quote }}
            - name: APP_VERSION
              value: {{ .Values.deployment.image.tag | quote }}
            - name: AWS_REGION
              value: {{ $awsRegion | quote }}
            {{- if .Values.deployment.enableApm }}
            - name: ELASTIC_APM_SECRET_TOKEN
              valueFrom:
                secretKeyRef:
                  name: essp-apm-credentials
                  key: apm_secret_token
            - name: ELASTIC_APM_SERVER_URLS
              valueFrom:
                secretKeyRef:
                  name: essp-apm-credentials
                  key: apm_server_url
            {{- end }}
            - name: MOUNT_PATH
              value: "{{ $mountPath }}"
            {{- if $appConfigEnabled }}
            - name: CONFIG_PATH
              value: "{{ $mountPath }}/app"
            {{- end }}
            - name: CACERTS
              value: "{{ $cacertsSecretName }}"
            - name: STOREKEYS
              value: "{{ $storeKeysSecretName }}"
            #END: standard specific envs
            {{- include "commerce-app-v2.deployment.framework.env" . | nindent 12 }}
            {{- with .Values.deployment.env }}
            {{ toYaml . | nindent 12 }}
            {{- end }}
      terminationGracePeriodSeconds: 90
      volumes:
        #BEGIN: standard specific volumes
        {{- if $appConfigEnabled }}
        - name: app-config-secret
          secret:
            secretName: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-app-config") .) }}
        {{- end }}
        {{- if $authConfigEnabled }}
        - name: auth-config-secret
          secret:
            secretName: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-auth-config") .) }}
        {{- end }}
        {{- if $clientCertConfigEnabled }}
        - name: client-cert-config-secret
          secret:
            secretName: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-client-cert-config") .) }}
        {{- end }}
        {{- if $cryptoConfigEnabled }}
        - name: crypto-config-secret
          secret:
            secretName: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-crypto-config") .) }}
        {{- end }}
        {{- if $dbConfigEnabled }}
        - name: db-config-secret
          secret:
            secretName: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-db-config") .) }}
        {{- end }}
        {{- if $hostsConfigEnabled }}
        - name: hosts-config-secret
          secret:
            secretName: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-hosts-config") .) }}
        {{- end }}
        {{- if $logConfigEnabled }}
        - name: log-config-configmap
          configMap:
            name: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-log-config") .) }}
        {{- end }}
        {{- if $pkiConfigEnabled }}
        - name: client-cert-context-secret
          secret:
            secretName: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-client-cert-context") .) }}
        {{- end }}
        {{- if $prometheusAgentEnabled }}
        - name: prometheus-config-secret
          secret:
            optional: true
            secretName: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-prometheus-config") .) }}
        {{- end }}
        {{- if $sensitiveConfigEnabled }}
        - name: sensitive-config-secret
          secret:
            secretName: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-sensitive-config") .) }}
            defaultMode: {{ .Values.configs.standard.sensitive.defaultMode }}
        {{- end }}
        {{- if $tlsConfigEnabled }}
        - name: tls-config-secret
          secret:
            secretName: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-tls-config") .) }}
        {{- end }}
        {{- if $classicDbConfigEnabled }}
        - name: classic-db-config
          secret:
            optional: true
            secretName: {{ include "commerce-app-v2.resourceName" (merge (dict "resourceNameInfix" "-classic-db-configexternal") .) }}
        {{- end }}
        - name: {{ $cacertsSecretName }}
          secret:
            secretName: {{ $cacertsSecretName }}
        - name: {{ $storeKeysSecretName }}
          secret:
            secretName: {{ $storeKeysSecretName }}
        #END: standard specific volumes
        {{- include "commerce-app-v2.deployment.framework.volume" . | nindent 8 }}
        {{- with .Values.deployment.extraVolumes }}
        {{ toYaml . | nindent 10 }}
        {{- end }}
{{- end }}
{{- end }}
